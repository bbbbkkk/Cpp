#include <iostream>
#include <stack>
using namespace std;
class minstack
{
public:
    minstack() {}
    ~minstack() {}
    void push(int val)
    {
        _st.push(val);
        if (_minist.empty() || val <= _minist.top())
        {
            _minist.push(val);
        }
    }
    void pop()
    {
        if (!_st.empty() && _minist.top() == _st.top())
        {
            _minist.pop();
        }
        if (!_st.empty())
        {
            _st.pop();
        }
    }
    int top()
    {
        return _st.top();
    }
    int getmini()
    {
        return _minist.top();
    }
    bool isempty_minstack()
    {
        return _st.empty();
    }
    friend ostream &operator<<(ostream &out, const minstack &ms)
    {
        stack<int> tem = ms._st;
        while (!tem.empty())
        {
            cout << tem.top() << " ";
            tem.pop();
        }
        return out;
    }

private:
    stack<int> _st;
    stack<int> _minist;
};
int main()
{
    minstack m1;
    m1.push(4);
    m1.push(2);
    m1.push(2);
    m1.push(9);
    m1.push(7);
    m1.push(1);
    cout << m1;
    cout << endl;
    m1.pop();
    cout << m1;
    cout << endl;

    cout << m1.getmini() << endl;

    return 0;
}
