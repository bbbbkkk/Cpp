#include <bitset>
#include <iostream>
#include <vector>
using namespace std;
namespace bit
{
    template <size_t N>
    class bitset
    {
    public:
        bitset()
        {
            _a.resize(N / 32 + 1);
        }
        void set(size_t x)
        {
            size_t i = x % 32;
            size_t j = x / 32;
            _a[i] |= (1 << j);
        }
        void reset(size_t x)
        {
            size_t i = x % 32;
            size_t j = x / 32;
            _a[i] &= (~(1 << j));
        }
        bool test(size_t x)
        {
            size_t i = x % 32;
            size_t j = x / 32;
            return _a[i] & (1 << j);
        }

    private:
        vector<int> _a;
    };
};

void test1()
{
    bit::bitset<100> bs1;
    int arr[] = {1, 1, 5, 3, 7, 2, 9, 4, 7, 5, 7, 1};
    for (auto e : arr)
    {
        bs1.set(e);
    }
    cout << bs1.test(1) << endl;
    cout << bs1.test(11) << endl;
    cout << bs1.test(5) << endl;
    cout << bs1.test(20) << endl;
    cout << bs1.test(3) << endl
         << endl;
    bs1.reset(1);
    cout << bs1.test(1) << endl;
    cout << bs1.test(11) << endl;
    cout << bs1.test(5) << endl;
    cout << bs1.test(20) << endl;
    cout << bs1.test(3) << endl;
}
void test2()
{
    bitset<100> bs1;
    int arr[] = {1, 1, 5, 3, 7, 2, 9, 4, 7, 5, 7, 1};
    for (auto e : arr)
    {
        bs1.set(e);
    }
    cout << bs1.test(1) << endl;
    cout << bs1.test(11) << endl;
    cout << bs1.test(5) << endl;
    cout << bs1.test(20) << endl;
    cout << bs1.test(3) << endl
         << endl;
    bs1.reset(1);
    cout << bs1.test(1) << endl;
    cout << bs1.test(11) << endl;
    cout << bs1.test(5) << endl;
    cout << bs1.test(20) << endl;
    cout << bs1.test(3) << endl;
}
int main()
{
    test1();
    cout << endl;
    test2();

    return 0;
}
